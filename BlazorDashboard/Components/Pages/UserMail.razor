@page "/user-mail"
@rendermode InteractiveServer
@using BlazorDashboard.Models
@using BlazorDashboard.Services
@inject UserMailService UserMails

<h2 class="mb-4">우편 일괄 발송</h2>

<div class="mb-3 d-flex justify-content-between align-items-center">
    <div class="fw-semibold">유저 목록</div>
    <button class="btn btn-sm btn-outline-primary" @onclick="OnSelectAll">모든 유저 선택</button>
</div>

<div class="card mb-4">
    <div class="card-body p-0">
        <table class="table table-hover table-sm mb-0 align-middle">
            <thead class="table-light">
                <tr>
                    <th style="width:48px;"></th>
                    <th style="width:120px;">ID</th>
                    <th>이름</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var u in Users)
                {
                    <tr class="@(u.Selected ? "table-active" : null)">
                        <td class="text-center">
                            <input type="checkbox" class="form-check-input" @bind="u.Selected" />
                        </td>
                        <td>@u.Id</td>
                        <td>@u.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-12 col-md-8">
                <div class="mb-3">
                    <label class="form-label">제목</label>
                    <input class="form-control" @bind="Title" />
                </div>
                <div class="mb-3">
                    <label class="form-label">내용</label>
                    <textarea class="form-control" rows="5" @bind="Body"></textarea>
                </div>
                <div class="row g-3">
                    <div class="col-6 col-md-4">
                        <label class="form-label">아이템 ID</label>
                        <input class="form-control" type="number" @bind="ItemId" />
                    </div>
                    <div class="col-6 col-md-4">
                        <label class="form-label">아이템 개수</label>
                        <input class="form-control" type="number" @bind="ItemCount" />
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-4 d-flex align-items-end justify-content-md-end">
                <button class="btn btn-primary btn-lg w-100 w-md-auto" @onclick="OnSendAsync">전달</button>
            </div>
        </div>
    </div>
</div>

@code {

    // 유저 뷰모델
    class UserVm
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public bool Selected { get; set; }
    }

    // 유저 목록
    List<UserVm> Users { get; set; } = new();

    // 선택한 유저 목록
    HashSet<int> SelectUsers { get; set; } = new();
    bool IsAllSelected = false;

    // 메일 발송에 필요한 필드
    string Title { get; set; } = string.Empty;
    string Body { get; set; } = string.Empty;
    int ItemId { get; set; }
    int ItemCount { get; set; } = 1;

    // 에러 메시지 
    private string? error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            error = null;
            var users = await UserMails.GetUsersAsync();
            Users = users.Select(u => new UserVm
                {
                    Id = u.Id,
                    Name = u.Name,
                    Selected = false
                }).ToList();
        }
        catch(Exception ex)
        {
            error = ex.Message;
        }
    }

    private void OnSelectAll()
    {
        if (IsAllSelected)
        {
            Users.ForEach(u =>
            {
                u.Selected = false;
			});
			SelectUsers.Clear();
        }
        else
        {
            Users.ForEach(u =>
            {
                u.Selected = true;
                SelectUsers.Add(u.Id);
            });
        }

		IsAllSelected = !IsAllSelected;
    }

    private async Task OnSendAsync()
    {
        try
        {
               
        } 
        catch (Exception ex)
        {
			Console.WriteLine(ex);
        }
    }
}